<--------Leetcode 958-------->

Approach1 1:
(Using BFS) 

class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        TreeNode* prev=root;
        while(!q.empty()){
            TreeNode* node=q.front();
            q.pop();
            if(node==NULL){
                prev=node;
            }
            else{
                if(prev==NULL){
                    return false;
                }
                q.push(node->left);
                q.push(node->right);
            }
            
        }
        return true;
    }
};
..........................................................................................................................................................................

Approach 2:
(Using DFS)

class Solution {
public:
    int countNodes(TreeNode* root) {
        if(root == NULL)
            return 0;
        
        return 1 + countNodes(root->left) + countNodes(root->right);
    }
    
    bool dfs(TreeNode* root, int i, int totalNodes) {
        if(root == NULL)
            return true;
        
        if(i > totalNodes)
            return false;
        
        return dfs(root->left, 2*i, totalNodes) && 
               dfs(root->right, 2*i + 1, totalNodes);
    }
    
    //Using DFS
    bool isCompleteTree(TreeNode* root) {
        int totalNodes = countNodes(root);
        
        int i = 1;
        return dfs(root, i, totalNodes);
    }
};
..........................................................................................................................................................................

Time Complexity: O(n) 
Space Complexity: O(n) 
