<--------Leetcode 863-------->

class Solution {
public:
    void dfs(TreeNode* root, TreeNode* parent,unordered_map<TreeNode*,TreeNode*> &mp){
        if(root==NULL) return;
        mp[root]=parent;
        dfs(root->left,root,mp);
        dfs(root->right,root,mp);
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*> mp;
        dfs(root,NULL,mp);
        queue<TreeNode*> q;
        unordered_set<TreeNode*> visited;
        visited.insert(target);
        q.push(target);
        for(int i=0;i<k && !q.empty();i++){
            int n=q.size();
            while(n--){
                TreeNode *node=q.front();
                q.pop();
                if(node->left && visited.find(node->left)==visited.end()){
                     q.push(node->left);
                     visited.insert(node->left);
                }
                if(node->right && visited.find(node->right)==visited.end()){
                     q.push(node->right);
                     visited.insert(node->right);
                }
                if(mp[node] && visited.find(mp[node])==visited.end()){
                     q.push(mp[node]);
                     visited.insert(mp[node]);
                }
            }
        }
        if(q.empty()) return {};
        vector<int> ans;
        while(!q.empty()){
            ans.push_back(q.front()->val);
            q.pop();
        }
        return ans;

    }
};

Time Complexity: O(n)
Space Complexity: O(n)
