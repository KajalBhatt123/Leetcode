<--------Leetcode 64-------->

class Solution {
public:
    int func(int i,int j,vector<vector<int>>& grid,int m, int n,vector<vector<int>> &dp){
        if(i==m-1 && j==n-1) return grid[i][j];
        if(i>=m || j>=n) return INT_MAX;
        if(dp[i][j]!=-1) return dp[i][j];
        int a=func(i,j+1,grid,m,n,dp);
        int b=func(i+1,j,grid,m,n,dp);
        return dp[i][j]=grid[i][j]+min(a,b);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return func(0,0,grid,m,n,dp);
    }
};

Time Complexity: O(n*m)
Space Complexity: O(n*m)
