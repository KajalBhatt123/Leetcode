<--------Leetcode 55-------->

Approach 1:
class Solution {
public:
    bool func(vector<int>&nums, int i,vector<int> &dp){
        if(i>=nums.size()-1){
            return true;
        }
        if(dp[i]!=-1) return dp[i];
         
            for(int j=1;j<=nums[i];j++){
                if(func(nums,i+j,dp)){
                    return dp[i]=true;
                }
            }
        return dp[i]=false;
    }
    bool canJump(vector<int>& nums) {
        vector<int>dp(nums.size(),-1);
        return func(nums,0,dp);
    }
};

Time Complexity: O(n.n)
Space Complexity: O(n)
.........................................................................................................................................................................................

Approach 2:
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int maxx=nums[0];
        for(int i=0;i<=nums.size();i++){
            if(maxx>=nums.size()-1){
                return true;
            }
            if(i>maxx){
                return false;
            }
            if(i+nums[i]>maxx) maxx=i+nums[i];
        }
        return false;
    }
};

Time Complexity: O(n)
Space Complexity: O(1)
