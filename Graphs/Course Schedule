<--------Leetcode 207-------->

class Solution {
public:
    bool canFinish(int n, vector<vector<int>>& prerequisites) {
        unordered_map<int,vector<int>> mp;
        for(int i=0;i<prerequisites.size();i++){
            mp[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        vector<int> indegree(n,0);
        queue<int> q;
        for(int i=0;i<n;i++){
            for(auto adj:mp[i]){
                indegree[adj]++;
            }   
        }
        for(int i=0;i<n;i++){
            if(indegree[i]==0)
                q.push(i);
        }
        vector<int> sortt;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            sortt.push_back(node);
            for(auto adj:mp[node]){
                indegree[adj]--;
                if(indegree[adj]==0)
                    q.push(adj);
            }
        }
        if(n==sortt.size()) return true;
        return false;
    }
};
Time Complexity: O(V+E)
Space Complexity: O(V+E)
