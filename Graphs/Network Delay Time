<--------Leetcode 743-------->

class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        unordered_map<int,vector<pair<int,int>>> mp;
        for(int i=0;i<times.size();i++){
            int u=times[i][0]-1;
            int v=times[i][1]-1;
            int w=times[i][2];
            mp[u].push_back({v,w});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,k-1});
        vector<int> dst(n,INT_MAX);
        dst[k-1]=0;
        while(!pq.empty()){
            int cost=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            for(auto ch:mp[node]){
                if(cost+ch.second<dst[ch.first]){
                    dst[ch.first]=cost+ch.second;
                    pq.push({dst[ch.first],ch.first});
                }
            }
        }
        int maxx=*max_element(dst.begin(),dst.end());
        if(maxx==INT_MAX) return -1;
        return maxx;
    }
};

Time Complexity: O((E+V)logV)
Space Complexity: O(V+E)
