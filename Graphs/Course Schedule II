<--------Leetcode 210-------->

class Solution {
public:
    vector<int> findOrder(int n, vector<vector<int>>& prerequisites) {
        unordered_map<int,vector<int>>mp;
        for(int i=0;i<prerequisites.size();i++){
            mp[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }
        vector<int>indegree(n,0);
        for(int i=0;i<n;i++){
            for(auto j:mp[i]){
                indegree[j]++;
            }
        }
        queue<int>q;
        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.push(i);
            }
        }
        vector<int>ans;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            ans.push_back(node);
            for(auto adj:mp[node]){
                indegree[adj]--;
                if(indegree[adj]==0){
                    q.push(adj);
                }
                
            }
        }
        if(n!=ans.size()) return {};
        return ans;
    }
};

Time Complexity: O(V+E)
Space Complexity: O(V+E)
