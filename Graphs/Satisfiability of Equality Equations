<--------Leetcode 990-------->

class Solution {
public:
    int find(int set, vector<int> &parent){
        if(set==parent[set]) return set;
        return parent[set]=find(parent[set],parent);
    }
    void unionn(int setA,int setB, vector<int> &parent,vector<int> &rank){
        int parentA=find(setA,parent);
        int parentB=find(setB,parent);
        if(parentA==parentB){
            return;
        }
        if(rank[parentA]>rank[parentB]){
            parent[parentB]=parentA;
        }
        else if(rank[parentA]<rank[parentB]){
            parent[parentA]=parentB;
        }
        else{
            parent[parentB]=parentA;
            rank[parentA]++;
        }
    }
    bool equationsPossible(vector<string>& equations) {
        unordered_map<int,vector<int>>mp;
        vector<int> parent(26);
        vector<int> rank(26,0);
        for(int i=0;i<26;i++){
            parent[i]=i;
        }
        for(int i=0;i<equations.size();i++){
            if(equations[i][1]=='='){
                unionn(equations[i][0]-97,equations[i][3]-97,parent,rank);
            }
        }
        for(int i=0;i<equations.size();i++){
            if(equations[i][1]!='='){
                int parentA=find(equations[i][0]-97,parent);
                int parentB=find(equations[i][3]-97,parent);
                if(parentA==parentB){
                    return false;
                }
            }
        }
        return true;
    }
};

Time Complexity: O(n)
Space Complexity: O(n)
