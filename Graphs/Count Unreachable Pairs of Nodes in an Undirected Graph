<--------Leetcode 2316-------->

class Solution {
public:
    int find(int set, vector<int> &parent){
        if(set==parent[set]) return set;
        return parent[set]=find(parent[set],parent);
    }
    void unionn(int setA,int setB, vector<int> &parent,vector<int> &rank){
        int parentA=find(setA,parent);
        int parentB=find(setB,parent);
        if(parentA==parentB){
            return;
        }
        if(rank[parentA]>rank[parentB]){
            parent[parentB]=parentA;
        }
        else if(rank[parentA]<rank[parentB]){
            parent[parentA]=parentB;
        }
        else{
            parent[parentB]=parentA;
            rank[parentA]++;
        }
    }
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<int> parent(n);
        vector<int> rank(n,0);
        for(int i=0;i<n;i++){
            parent[i]=i;
        }
        for(int i=0;i<edges.size();i++){
            unionn(edges[i][0],edges[i][1],parent,rank);
        }
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            int p=find(i,parent);
            mp[p]++;
        }
        long long sum1=0,sum2=0;
        if(mp.size()==1) return 0;
        for(auto ch:mp){
            sum1+=ch.second;
            sum2+=(n-sum1)*ch.second;
        }
        return sum2;
    }
};

Time Complexity: O(n)
Space Complexity: O(n)
