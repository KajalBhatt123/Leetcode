<--------Leetcode 1319-------->

class Solution {
public:
    int nodes;
    int makeConnected(int n, vector<vector<int>>& connections) {
        int edges=connections.size();
        if(edges<n-1) return -1;
        nodes=n;
        vector<int> parent(n);
        vector<int> rank(n,0);
        for(int i=0;i<n;i++){
            parent[i]=i;
        }
        for(int i=0;i<edges;i++){
            unionn(connections[i][0],connections[i][1],parent,rank);
        }
        return nodes-1;
    }
    int find(int set, vector<int> &parent){
        if(set==parent[set]) return set;
        return parent[set]=find(parent[set],parent);
    }
    void unionn(int setA,int setB, vector<int> &parent,vector<int> &rank){
        int parentA=find(setA,parent);
        int parentB=find(setB,parent);
        if(parentA==parentB){
            return;
        }
        if(rank[parentA]>rank[parentB]){
            parent[parentB]=parentA;
        }
        else if(rank[parentA]<rank[parentB]){
            parent[parentA]=parentB;
        }
        else{
            parent[parentB]=parentA;
            rank[parentA]++;
        }
        nodes--;
    }
    
};

Time Complexity: O(n)
Space Complexity: O(n)
