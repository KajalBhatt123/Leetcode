<--------Leetcode 2385-------->

class Solution {
public:
    void dfs(TreeNode* root, int start,TreeNode* &start_node,unordered_map<TreeNode*,TreeNode*> &mp,TreeNode* parent){
        if(root==NULL) return ;
        mp[root]=parent;
        if(root->val==start){
            start_node=root;
        }
        dfs(root->left,start,start_node,mp,root);
        dfs(root->right,start,start_node,mp,root);

    }
    int amountOfTime(TreeNode* root, int start) {
        TreeNode* start_node=NULL;
        unordered_map<TreeNode*,TreeNode*> mp;
        dfs(root,start,start_node,mp,NULL);
        queue<TreeNode*> q;
        unordered_set<TreeNode*> visited;
        visited.insert(start_node);
        q.push(start_node);
        int count=0;
        while(!q.empty()){
            int n=q.size();
            bool flag=false;
            while(n--){
                TreeNode* node=q.front();
                q.pop();
                if(node->left && visited.find(node->left)==visited.end()){
                    visited.insert(node->left);
                    q.push(node->left);
                    flag=true;
                }
                if(node->right && visited.find(node->right)==visited.end()){
                    visited.insert(node->right);
                    q.push(node->right);
                    flag=true;
                }
                if(mp[node] && visited.find(mp[node])==visited.end()){
                    visited.insert(mp[node]);
                    q.push(mp[node]);
                    flag=true;
                }
                

            }
            if(flag) count++;
        }
        return count;
    }
};

Time Complexity: O((n×m)×log(n×m))
Space Complexity: O(n×m)
