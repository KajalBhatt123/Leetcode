<--------https://www.geeksforgeeks.org/problems/shortest-path-in-weighted-undirected-graph/1-------->

class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        set<pair<int,int>> sett;
        vector<vector<pair<int,int>>> pairr(n);
        for(int i=0;i<m;i++){
            int u = edges[i][0] - 1;  
            int v = edges[i][1] - 1;  
            int w = edges[i][2];
            pairr[u].push_back({v, w});
            pairr[v].push_back({u, w});
        }
        vector<int> dst(n,INT_MAX);
        dst[0]=0;
        vector<int> parent(n,-1);
        sett.insert({0,0});
        while(!sett.empty()){
            int cost=sett.begin()->first;
            int node=sett.begin()->second;
            sett.erase(sett.begin());
            for(int i=0;i<pairr[node].size();i++){
                int neighbour_node=pairr[node][i].first;
                int neighbour_cost=pairr[node][i].second;
                if(cost+neighbour_cost<dst[neighbour_node]){
                    
                    if(dst[neighbour_node]!=INT_MAX){
                        auto it=sett.find({dst[neighbour_node],neighbour_node});
                        if(it!=sett.end()) sett.erase(it);
                    }
                    
                    dst[neighbour_node]=cost+neighbour_cost;
                    parent[neighbour_node]=node;
                    sett.insert({dst[neighbour_node],neighbour_node});
                }
            }
            
        }
        vector<int> path;
        if(dst[n-1]==INT_MAX) return {-1};
        int i=n-1;
        while(i!=-1){
            path.push_back(i+1);
            i=parent[i];
            
        }
        path.push_back(dst[n-1]);
        reverse(path.begin(), path.end());

        // path.insert(path.begin(), dst[n - 1]);
        return path;
    }
};

Time Complexity: O((V+E)logV)
Space Complexity: O(V+E)
