<--------Leetcode 1631-------->

class Solution {
public:
    vector<vector<int>>dirc={{-1,0},{1,0},{0,-1},{0,1}};
    bool check(int i, int j, int n, int m){
        return i>=0 && j>=0 && i<n && j<m;
    }
    int minimumEffortPath(vector<vector<int>>& heights) {
       priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
       int n=heights.size(),m=heights[0].size();
       vector<vector<int>> dst(n,vector<int>(m,INT_MAX));
       pq.push({0,{0,0}});
       dst[0][0]=0;
       while(!pq.empty()){
                int cost=pq.top().first;
                int i=pq.top().second.first;
                int j=pq.top().second.second;
                pq.pop();
                for(int k=0;k<4;k++){
                    int i_=i+dirc[k][0];
                    int j_=j+dirc[k][1];
                    if(check(i_,j_,n,m)){
                        int neighbour_cost=abs(heights[i_][j_]-heights[i][j]);
                        int maxx=max(cost,neighbour_cost);
                        if(maxx<dst[i_][j_]){
                        dst[i_][j_]=maxx;
                        pq.push({maxx,{i_,j_}});
                    }
                    }
                }
            
       }
       return dst[n-1][m-1];
    }
};

Time Complexity: O((n×m)×log(n×m))
Space Complexity: O(n×m)
