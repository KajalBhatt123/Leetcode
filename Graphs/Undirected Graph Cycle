<--------https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1-------->

class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool dfs(vector<int> adj[],vector<bool> &visited, int parent,int u){
        visited[u]=true;
        for(int i=0;i<adj[u].size();i++){
            if(adj[u][i]==parent) continue;
            if(visited[adj[u][i]]==true){
                return true;
            }
            if(dfs(adj,visited,u,adj[u][i])) return true;
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool> visited(V,false);
        for(int i=0;i<V;i++){
            if(visited[i]==false && dfs(adj,visited,-1,i))
            return true;
        }
        
        return false;
    }
};

int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}

Time Complexity: O(V+E)
Space Complexity: O(V+E)
