<--------Leetcode 79-------->

class Solution {
public:
    bool func(int i,int j,vector<vector<char>>& board, string word,int ind,int m, int n){
        if(ind==word.size()) return true;
        if(i<0 || j<0 || i>=n || j>=m || board[i][j]=='/'){
            return false;
        }
        char temp=board[i][j];
        if(board[i][j]==word[ind]){

            board[i][j]='/';
            if(func(i,j+1,board,word,ind+1,m,n)) return true;
            else if(func(i+1,j,board,word,ind+1,m,n)) return true;
            else if(func(i-1,j,board,word,ind+1,m,n)) return true;
            else if(func(i,j-1,board,word,ind+1,m,n)) return true;
        }
        board[i][j]=temp;
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int n=board.size(),m=board[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]==word[0] && func(i,j,board,word,0,m,n)){
                    return true;
                }
            }
        }
        return false;
    }
};

Time Complexity: O(n*m*4^L)
Space Complexity: O(L)
(L=length of word)
