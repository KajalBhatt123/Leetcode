<--------Leetcode 1636-------->

class Solution {
public:
    vector<int> frequencySort(vector<int>& nums) {
        unordered_map<int,int> mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        vector<pair<int,int>> pairr;
        for(auto i:mp){
            pairr.push_back({i.second,i.first});
        }
        sort(pairr.begin(), pairr.end(), [](const pair<int, int> &a, const pair<int, int> &b) {
        if (a.first == b.first) {
            return a.second > b.second;
        }
        return a.first < b.first;
    });
        vector<int> nums1;
        for(auto p:pairr){
            nums1.insert(nums1.end(), p.first, p.second);
        }
        return nums1;
    }
};

Time Complexity: O(n + m log m)
Space Complexity: O(n + m)
