<--------Leetcode 81-------->

class Solution {
public:
    bool func(vector<int> &nums,int left, int right,int target){
        while(left<=right){
            
            int mid=left+(right-left)/2;
            if(nums[mid]==target){
                return true;
            }
            if(nums[mid]<target){
                left=mid+1;
            }
            else{
                right=mid-1;
            }
        }
        return false;
    }
    bool search(vector<int>& nums, int target) {
        int n=nums.size(),mid,left=0,right=n-1;
        while(left<right){
            while(left<right && nums[left]==nums[left+1]){
                left++;
            }
            while(left<right && nums[right]==nums[right-1]){
                right--;
            }
        mid=left+(right-left)/2;
            if(nums[mid]>nums[right]){
                left=mid+1;
            }
            else{
                right=mid;
            }
        }
        if(target>=nums[left] && target<=nums[n-1]){
            return func(nums,left,n-1,target);
        }
        return func(nums,0,left-1,target);
    }
};

Time Complexity: O(log(n))
Space Complexity: O(1)
