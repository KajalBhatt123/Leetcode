<--------Leetcode 493-------->

class Solution {
public:
    int merge(vector<int> &nums, int l, int mid, int h){
        int i = l, j = mid + 1, k = 0,count=0;
        vector<int> v(h - l + 1);
        while(i<=mid && j<=h){
            if(nums[i] > 2LL * nums[j]){
                count+=(mid-i+1);
                j++;
            }
            else{
                i++;
            }

        }
        i = l;
        j = mid + 1;
        while(i<=mid && j<=h){
            if(nums[i]<=nums[j]){
                v[k]=nums[i];
                k++;
                i++;

            }
            else{
                v[k]=nums[j];
                k++;
                j++;
            }
        }
        while (i <= mid) {
            v[k++] = nums[i++];
        }

        while (j <= h) {
            v[k++] = nums[j++];
        }

        for (int i = l, k = 0; i <= h; ++i, ++k) {
            nums[i] = v[k];
        }

        return count;
    }
    void merge_sort(vector<int> &nums, int l,int h,int &count){
        if(l>=h) return;
        int mid=l+(h-l)/2;
        merge_sort(nums,l,mid,count);
        merge_sort(nums,mid+1,h,count);
        count+=merge(nums,l,mid,h);
    }
    int reversePairs(vector<int>& nums) {
        int count=0;
        merge_sort(nums,0,nums.size()-1,count);
        return count;
    }
};

Time Complexity: O(n log n)
Space Complexity: O(n)
