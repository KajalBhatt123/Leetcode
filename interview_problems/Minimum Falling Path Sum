----------Leetcode 931----------

class Solution {
public:
    int func(vector<vector<int>>& arr,int i, int j,int n,vector<vector<int>> &dp){
        if(j>n || j<0 ) return INT_MAX;
        if(i==n+1) return 0;
        if(dp[i][j]!=1e9) return dp[i][j];
        return dp[i][j]=arr[i][j]+min({func(arr,i+1,j,n,dp),func(arr,i+1,j+1,n,dp),func(arr,i+1,j-1,n,dp)});
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        
        int n=matrix.size(),minn=INT_MAX;
        vector<vector<int>> dp(n,vector<int> (n,1e9));
        for(int i=0;i<n;i++){
            minn=min(minn,func(matrix,0,i,n-1,dp));
        }
        return minn;
    }
};

Complexity--
Time: O(n)
Space: O(n)
